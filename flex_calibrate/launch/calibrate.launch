<?xml version="1.0"?>
<launch>
    <!-- you can write your own calibrate.launch, by including the ROS drivers for robot and tracking and choosing
    your own namespace if you have multiple tracking devices or robots -->

    <arg name="start_rviz"              default="false"/>
    <arg name="start_independent"       default="false"/>

    <arg name="namespace_prefix"        default="calibration"/>
    <arg name="eye_on_hand"             default="false"/>

    <!-- Aruco settings -->
    <arg name="use_aruco"               default="true" doc="When set to false a tracking simulator will be used"/>
    <arg name="marker_size"             default="0.039" doc="Size of the ArUco marker used, in meters"/>
    <arg name="marker_id"               default="26" doc="The ID of the ArUco marker used"/>

    <!-- Robot setting -->
    <arg name="robot_name"              default="px150"/>
    <arg name="manipulator_group_name"  default="interbotix_arm"/>
    <arg name="ee_group_name"           default="interbotix_gripper"/>

    <!-- Frame settings -->
    <arg name="robot_base_frame"        default="$(arg robot_name)/base_link"/> <!-- $(arg robot_name)/base_link -->
    <arg name="robot_effector_frame"    default="$(arg robot_name)/ee_arm_link"/>
    <arg name="tracking_base_frame"     default="camera_link" /> <!--  camera_bottom_screw_frame -->
    <arg name="marker_frame"            default="tracking_marker" />

    <arg name="calibrate_debug"         default="false"/>

    <!-- start the simulated tracking -->
    <node unless="$(arg use_aruco)"  name="tracking_simulator" pkg="flex_calibrate" type="tracking_simulator.py" output="screen">
        <!-- if false, it computes the tracking output with respect to the ground truth and publishes it wrt the calibration result -->
        <param name="is_calibration" value="true" />

        <!-- tracking simulation frequency and noise parameters -->
        <param name="frequency" value="10" />
        <param name="translation_noise_stdev" value="0.001" />
        <param name="rotation_noise_stdev" value="0.0001" />

        <param name="eye_on_hand" value="$(arg eye_on_hand)" />

        <!-- transformations for the eye-on-base case -->
        <!-- robot_base_frame to tracking_base_frame-->
        <param unless="$(arg eye_on_hand)" name="ground_truth_calibration_transformation" value="0.26 -0.02 0.57 3.1415 1.57 -1.57"/>
        <param unless="$(arg eye_on_hand)" name="arbitrary_marker_placement_transformation" value="0.0 0.0 0.0 0 0 0 1" />
        <!-- transformations for the eye-on-hand case -->
        <param if="$(arg eye_on_hand)" name="ground_truth_calibration_transformation" value="0.12 0.21 0.137 0 0 0 1" />
        <param if="$(arg eye_on_hand)" name="arbitrary_marker_placement_transformation" value="1 0 0.5 0 0 0 1" />

        <param name="tracking_base_frame" value="$(arg tracking_base_frame)" />
        <param name="tracking_marker_frame" value="$(arg marker_frame)" />
        <param name="robot_base_frame" value="$(arg robot_base_frame)" />
        <param name="robot_effector_frame" value="$(arg robot_effector_frame)" />

        <!-- simulated tracking noise parameters -->
        <param name="frequency" value="10" />
        <param name="translation_noise_stdev" value="0.0001" />
        <param name="rotation_noise_stdev" value="0.00001" />
    </node>

    <group ns="$(arg robot_name)">
       <!-- start ArUco -->
      <node if="$(arg use_aruco)" name="aruco_tracker" pkg="aruco_ros" type="single">
          <remap from="/camera_info" to="camera/color/camera_info" />
          <remap from="/image" to="camera/color/image_raw" />
          <param name="image_is_rectified" value="true"/>
          <param name="marker_size"        value="$(arg marker_size)"/>
          <param name="marker_id"          value="$(arg marker_id)"/>
          <param name="reference_frame"    value="$(arg tracking_base_frame)"/>
          <param name="camera_frame"       value="camera_color_optical_frame"/>
          <param name="marker_frame"       value="$(arg marker_frame)" />
      </node>

      <!-- start easy_handeye calibration procedure -->
      <include file="$(find easy_handeye)/launch/calibrate.launch" >
          <arg name="start_rviz" value="false" />
          <arg name="start_sampling_gui" value="false" />

          <arg name="namespace_prefix" value="$(arg namespace_prefix)" />
          <arg name="eye_on_hand" value="$(arg eye_on_hand)" />
          <arg name="publish_dummy" value="false" /> <!-- in our case it is done by the tracking simulator -->

          <arg name="tracking_base_frame" value="$(arg tracking_base_frame)" />
          <arg name="tracking_marker_frame" value="$(arg marker_frame)" />
          <arg name="robot_base_frame" value="$(arg robot_base_frame)" />
          <arg name="robot_effector_frame" value="$(arg robot_effector_frame)" />

          <arg name="freehand_robot_movement" value="true" /> <!-- we use or own node to move the robot -->
          <arg name="robot_velocity_scaling" value="0.5" />
          <arg name="robot_acceleration_scaling" value="0.2" />

          <arg name="move_group" value="$(arg manipulator_group_name)"/>
      </include>

      <!-- start rviz with custom configuration -->
      <node if="$(arg start_rviz)" name="$(anon rviz)"
        pkg="rviz"
        type="rviz"
        respawn="true"
        args="-d $(find easy_handeye_demo)/launch/iiwa_stack_config.rviz"
        output="screen" />

        <!-- ns="$(arg namespace_prefix)_eye_on_base" -->
      <node name="calibrate"
        pkg="flex_calibrate"
        type="calibration_node.py"
        ns="$(arg namespace_prefix)_eye_on_base"
        output="screen">
        <param name ="debug" value="$(arg calibrate_debug)"/>
      </node>


      <group if="$(arg start_independent)">
        <node name="move_robot"
          pkg="flex_grasp"
          type="move_robot.py"
          output="screen">
          <remap from="/attached_collision_object" to="/$(arg robot_name)/attached_collision_object"/>
          <remap from="/collision_object" to="/$(arg robot_name)/collision_object"/>
          <param name ="debug" value="$(arg calibrate_debug)"/>
        </node>

        <node name="monitor_robot"
    			pkg="flex_grasp"
    			type="monitor_robot.py"
    			output="screen">
    			<param name ="debug" value="$(arg calibrate_debug)"/>
        </node>


        <param name="planning_frame" value="world"/>
        <param name="robot_base_frame" value="$(arg robot_base_frame)"/>
        <param name="manipulator_group_name" value="$(arg manipulator_group_name)"/>
        <param name="ee_group_name" value="$(arg ee_group_name)"/>

      </group>
    </group>
</launch>
